name: Rollback Deployment

on:
  workflow_dispatch:
    inputs:
      rollback_type:
        description: 'Rollback Type'
        required: true
        default: 'previous'
        type: choice
        options:
          - previous
          - specific_version
          - list_versions
      version_tag:
        description: 'Specific version tag (if rollback_type is specific_version)'
        required: false
        type: string

jobs:
  rollback:
    runs-on: ubuntu-latest

    steps:
      - name: Show Deployment History
        if: github.event.inputs.rollback_type == 'history'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Deployment History ==="
            echo ""
            if [ -f /home/ec2-user/deployments/history.txt ]; then
              echo "Previous deployments (newest first):"
              echo "Date/Time | Image | GitHub Run ID"
              echo "----------------------------------------"
              tail -10 /home/ec2-user/deployments/history.txt | sort -r
            else
              echo "No deployment history found"
            fi
            echo ""
            echo "Current deployment:"
            if [ -f /home/ec2-user/deployments/current.info ]; then
              cat /home/ec2-user/deployments/current.info
            else
              echo "No current deployment info found"
            fi

      - name: List Available Versions (if requested)
        if: github.event.inputs.rollback_type == 'list_versions'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Available Versions for Rollback ==="
            echo ""
            echo "Current deployment:"
            if [ -f /home/ec2-user/deployments/current.info ]; then
              cat /home/ec2-user/deployments/current.info
            else
              echo "No current deployment info found"
            fi
            echo ""
            echo "Previous deployment:"
            if [ -f /home/ec2-user/deployments/previous.info ]; then
              cat /home/ec2-user/deployments/previous.info
            else
              echo "No previous deployment info found"
            fi
            echo ""
            echo "Available Docker images:"
            docker images rizzerve-app --format "table {{.Tag}}\t{{.CreatedAt}}\t{{.Size}}"
            echo ""
            echo "Current running container:"
            docker ps -f name=rizzerve --format "table {{.Names}}\t{{.Status}}\t{{.Image}}\t{{.Ports}}" || echo "No container running"
            echo ""
            echo "Recent deployment history:"
            if [ -f /home/ec2-user/deployments/history.txt ]; then
              echo "Date/Time | Image | GitHub Run ID"
              echo "----------------------------------------"
              tail -5 /home/ec2-user/deployments/history.txt | sort -r
            fi

      - name: Rollback to Previous Version
        if: github.event.inputs.rollback_type == 'previous'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Rolling Back to Previous Version ==="
            echo "Timestamp: $(date)"
            
            # Check if previous deployment info exists
            if [ ! -f /home/ec2-user/deployments/previous.info ]; then
              echo "❌ ERROR: No previous deployment information found!"
              echo "Available images:"
              docker images rizzerve-app --format "table {{.Tag}}\t{{.CreatedAt}}"
              exit 1
            fi
            
            # Load previous deployment info
            source /home/ec2-user/deployments/previous.info
            
            if [ -z "$PREVIOUS_IMAGE" ]; then
              echo "❌ ERROR: Previous image information not found in deployment info!"
              exit 1
            fi
            
            echo "Rolling back to: $PREVIOUS_IMAGE"
            
            # Check if previous image exists
            if ! docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$PREVIOUS_IMAGE"; then
              echo "❌ ERROR: Previous image $PREVIOUS_IMAGE not found locally!"
              echo "Available images:"
              docker images rizzerve-app --format "table {{.Tag}}\t{{.CreatedAt}}"
            
              echo ""
              echo "Checking deployment history for alternatives..."
              if [ -f /home/ec2-user/deployments/history.txt ]; then
                echo "Recent deployments:"
                tail -5 /home/ec2-user/deployments/history.txt | sort -r
                echo ""
                echo "You can use 'specific_version' rollback type with one of these versions."
              fi
              exit 1
            fi
            
            if docker ps -q -f name=rizzerve; then
              CURRENT_SPECIFIC_IMAGE=""
              if [ -f /home/ec2-user/deployments/current.info ]; then
                CURRENT_SPECIFIC_IMAGE=$(grep "SPECIFIC_IMAGE=" /home/ec2-user/deployments/current.info | cut -d= -f2 || echo "")
              fi
            
              if [ -z "$CURRENT_SPECIFIC_IMAGE" ]; then
                CURRENT_SPECIFIC_IMAGE=$(docker inspect rizzerve --format='{{.Config.Image}}')
              fi
            
              cat > /home/ec2-user/deployments/rollback-backup.info << EOF
            ROLLBACK_BACKUP_IMAGE=$CURRENT_SPECIFIC_IMAGE
            ROLLBACK_BACKUP_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            ROLLBACK_FROM_GITHUB_RUN=${{ github.run_id }}
            EOF
            
              echo "$(date '+%Y-%m-%d %H:%M:%S') | $CURRENT_SPECIFIC_IMAGE | rollback-backup | ${{ github.run_id }}" >> /home/ec2-user/deployments/history.txt
            fi
            
            # Recreate environment file
            cat > /home/ec2-user/.env << EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            SPRING_PROFILES_ACTIVE=staging
            ROLLBACK_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            ROLLBACK_TO_IMAGE=$PREVIOUS_IMAGE
            EOF
            chmod 600 /home/ec2-user/.env
            
            # Stop current container
            echo "Stopping current container..."
            docker stop rizzerve || true
            docker rm rizzerve || true
            
            # Start previous version
            echo "Starting previous version..."
            docker run -d \
              --name rizzerve \
              -p 80:8080 \
              --env-file /home/ec2-user/.env \
              --restart unless-stopped \
              $PREVIOUS_IMAGE
            
            # Wait for container to start
            sleep 15
            
            # Check if container is running
            if docker ps -f name=rizzerve --format "{{.Names}}" | grep -q "rizzerve"; then
              echo "✅ Rollback successful! Container is running."
            
              # Show container details
              docker ps -f name=rizzerve --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}"
            
              # Show startup logs
              echo "Container startup logs:"
              docker logs --tail 15 rizzerve
            
              # Update deployment info
              cat > /home/ec2-user/deployments/current.info << EOF
            CURRENT_IMAGE=rizzerve-app:latest
            SPECIFIC_IMAGE=$PREVIOUS_IMAGE
            ROLLBACK_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            ROLLBACK_TYPE=previous
            GITHUB_ROLLBACK_RUN=${{ github.run_id }}
            CONTAINER_STATUS=running
            EOF
            
              echo "$(date '+%Y-%m-%d %H:%M:%S') | $PREVIOUS_IMAGE | rollback-previous | ${{ github.run_id }}" >> /home/ec2-user/deployments/history.txt
            
              echo "Application should be accessible at: http://${{ secrets.STAGING_HOST_DNS }}"
            else
              echo "❌ Rollback failed - container is not running!"
              echo "Container logs:"
              docker logs rizzerve 2>/dev/null || echo "No logs available"
              exit 1
            fi

      - name: Rollback to Specific Version
        if: github.event.inputs.rollback_type == 'specific_version'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.STAGING_HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Rolling Back to Specific Version ==="
            echo "Timestamp: $(date)"
            
            VERSION_TAG="${{ github.event.inputs.version_tag }}"
            
            if [ -z "$VERSION_TAG" ]; then
              echo "❌ ERROR: Version tag not provided!"
              echo "Available versions:"
              docker images rizzerve-app --format "table {{.Tag}}\t{{.CreatedAt}}"
              echo ""
              if [ -f /home/ec2-user/deployments/history.txt ]; then
                echo "Recent deployment history:"
                echo "Date/Time | Image | GitHub Run ID"
                echo "----------------------------------------"
                tail -5 /home/ec2-user/deployments/history.txt | sort -r
              fi
              exit 1
            fi
            
            if [[ "$VERSION_TAG" == rizzerve-app:* ]]; then
              TARGET_IMAGE="$VERSION_TAG"
            else
              TARGET_IMAGE="rizzerve-app:$VERSION_TAG"
            fi
            
            echo "Rolling back to: $TARGET_IMAGE"
            
            # Check if target image exists
            if ! docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "$TARGET_IMAGE"; then
              echo "❌ ERROR: Image $TARGET_IMAGE not found locally!"
              echo "Available images:"
              docker images rizzerve-app --format "table {{.Tag}}\t{{.CreatedAt}}"
              echo ""
              if [ -f /home/ec2-user/deployments/history.txt ]; then
                echo "Recent deployment history:"
                echo "Date/Time | Image | GitHub Run ID"
                echo "----------------------------------------"
                tail -5 /home/ec2-user/deployments/history.txt | sort -r
              fi
              exit 1
            fi
            
            # Backup current deployment info before rollback
            if docker ps -q -f name=rizzerve; then
              CURRENT_SPECIFIC_IMAGE=""
              if [ -f /home/ec2-user/deployments/current.info ]; then
                CURRENT_SPECIFIC_IMAGE=$(grep "SPECIFIC_IMAGE=" /home/ec2-user/deployments/current.info | cut -d= -f2 || echo "")
              fi
            
              if [ -z "$CURRENT_SPECIFIC_IMAGE" ]; then
                CURRENT_SPECIFIC_IMAGE=$(docker inspect rizzerve --format='{{.Config.Image}}')
              fi
            
              cat > /home/ec2-user/deployments/rollback-backup.info << EOF
            ROLLBACK_BACKUP_IMAGE=$CURRENT_SPECIFIC_IMAGE
            ROLLBACK_BACKUP_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            ROLLBACK_FROM_GITHUB_RUN=${{ github.run_id }}
            EOF
            
              echo "$(date '+%Y-%m-%d %H:%M:%S') | $CURRENT_SPECIFIC_IMAGE | rollback-backup | ${{ github.run_id }}" >> /home/ec2-user/deployments/history.txt
            fi
            
            # Recreate environment file
            cat > /home/ec2-user/.env << EOF
            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            SPRING_PROFILES_ACTIVE=staging
            ROLLBACK_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            ROLLBACK_TO_IMAGE=$TARGET_IMAGE
            ROLLBACK_TO_VERSION=$VERSION_TAG
            EOF
            chmod 600 /home/ec2-user/.env
            
            # Stop current container
            echo "Stopping current container..."
            docker stop rizzerve || true
            docker rm rizzerve || true
            
            # Start target version
            echo "Starting version $VERSION_TAG..."
            docker run -d \
              --name rizzerve \
              -p 80:8080 \
              --env-file /home/ec2-user/.env \
              --restart unless-stopped \
              $TARGET_IMAGE
            
            # Wait for container to start
            sleep 15
            
            # Check if container is running
            if docker ps -f name=rizzerve --format "{{.Names}}" | grep -q "rizzerve"; then
              echo "✅ Rollback to $VERSION_TAG successful! Container is running."
            
              # Show container details
              docker ps -f name=rizzerve --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}\t{{.Image}}"
            
              # Show startup logs
              echo "Container startup logs:"
              docker logs --tail 15 rizzerve
            
              # Update deployment info
              cat > /home/ec2-user/deployments/current.info << EOF
            CURRENT_IMAGE=rizzerve-app:latest
            SPECIFIC_IMAGE=$TARGET_IMAGE
            VERSION_TAG=$VERSION_TAG
            ROLLBACK_TIME=$(date '+%Y-%m-%d %H:%M:%S')
            ROLLBACK_TYPE=specific_version
            GITHUB_ROLLBACK_RUN=${{ github.run_id }}
            CONTAINER_STATUS=running
            EOF
            
              echo "$(date '+%Y-%m-%d %H:%M:%S') | $TARGET_IMAGE | rollback-specific | ${{ github.run_id }}" >> /home/ec2-user/deployments/history.txt
            
              echo "Application should be accessible at: http://${{ secrets.STAGING_HOST_DNS }}"
            else
              echo "❌ Rollback to $VERSION_TAG failed - container is not running!"
              echo "Container logs:"
              docker logs rizzerve 2>/dev/null || echo "No logs available"
              exit 1
            fi